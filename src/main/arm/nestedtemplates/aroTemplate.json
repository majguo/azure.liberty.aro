{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "identity": {
            "type": "object",
            "metadata": {
                "description": "User-assigned managed identity granted with contributor role of the same subscription"
            }
        },
        "createCluster": {
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to create a new cluster or not"
            }
        },
        "clusterName": {
            "type": "string",
            "metadata": {
                "description": "Name for the existing cluster"
            }
        },
        "clusterRGName": {
            "type": "string",
            "metadata": {
                "description": "Name for the resource group of the existing cluster"
            }
        },
        "projMgrUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for cluster admin."
            }
        },
        "projMgrPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for cluster admin."
            }
        },
        "pullSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Pull secret from cloud.redhat.com. The json should be input as a string"
            }
        },
        "aadClientId": {
            "type": "string",
            "metadata": {
                "description": "The Application ID of an Azure Active Directory client application"
            }
        },
        "aadClientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The secret of an Azure Active Directory client application"
            }
        },
        "aadObjectId": {
            "type": "string",
            "metadata": {
                "description": "The Object ID of an Azure Active Directory client application"
            }
        },
        "rpObjectId": {
            "type": "String",
            "metadata": {
                "description": "The Object ID of the Resource Provider Service Principal"
            }
        },
        "masterVmSize": {
            "type": "string",
            "metadata": {
                "description": "Master Node VM Type"
            }
        },
        "workerVmSize": {
            "type": "string",
            "metadata": {
                "description": "Worker Node VM Type"
            }
        },
        "uploadAppPackage": {
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to deploy a user uploaded application or a default 'Hello world' application"
            }
        },
        "appPackageUrl": {
            "type": "string",
            "metadata": {
                "description": "The url to download user uploaded application package"
            }
        },
        "contextRoot": {
            "type": "string",
            "metadata": {
                "description": "The context root of the application"
            }
        },
        "useOpenLibertyImage": {
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to use Open Liberty or WebSphere Liberty as application base image"
            }
        },
         "useJava8": {
            "type": "bool",
            "metadata": {
                "description": "Flag indicating whether to use Java 8 as Java runtime of the application"
            }
        },
        "appReplicas": {
            "type": "int",
            "metadata": {
                "description": "The number of application replicas to deploy"
            }
        },
        "guidSuffix": {
            "type": "string",
            "metadata": {
                "description": "The suffix of GUID"
            }
        }
    },
    "variables": {
        "const_appImage": "[concat(variables('const_appImageName'), ':', variables('const_appImageTag'))]",
        "const_appImageName": "[concat('image', parameters('guidSuffix'))]",
        "const_appImageTag": "1.0.0",
        "const_appName": "[concat('app', parameters('guidSuffix'))]",
        "const_appPackageUrl": "[if(parameters('uploadAppPackage'), parameters('appPackageUrl'), 'N/A')]",
        "const_appProjName": "[concat('project', parameters('guidSuffix'))]",
        "const_arguments1": "[concat(variables('const_clusterRGName'), ' ', variables('name_clusterName'), ' ', parameters('projMgrUsername'), ' ', parameters('projMgrPassword'), ' ', variables('const_scriptLocation'), ' ', parameters('uploadAppPackage'), ' ', variables('const_appPackageUrl'))]",
        "const_arguments2": "[concat(' ', parameters('contextRoot'), ' ', parameters('useOpenLibertyImage'), ' ', parameters('useJava8'), ' ', variables('const_appName'), ' ', variables('const_appProjName'), ' ', variables('const_appImage'), ' ', parameters('appReplicas'))]",
        "const_clusterDomainName": "[concat('domain', parameters('guidSuffix'))]",
        "const_clusterRGName": "[if(parameters('createCluster'), resourceGroup().name, parameters('clusterRGName'))]",
        "const_contribRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
        "name_clusterName": "[if(parameters('createCluster'), concat('cluster', parameters('guidSuffix')), parameters('clusterName'))]",
        "name_clusterVNetName": "[concat('vnet', parameters('guidSuffix'))]",
        "name_deploymentScriptName": "[concat('script', parameters('guidSuffix'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${aro.aro.start}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "${azure.apiVersion}",
            "name": "[variables('name_clusterVNetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.100.0.0/15"
                    ]
                },
                "subnets": [
                    {
                        "name": "master",
                        "properties": {
                            "addressPrefix": "10.100.76.0/24",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                }
                            ],
                            "privateLinkServiceNetworkPolicies": "Disabled"
                        }
                    },
                    {
                        "name": "worker",
                        "properties": {
                            "addressPrefix": "10.100.70.0/23",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.ContainerRegistry"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
            "apiVersion": "${azure.apiVersion.vNetRoleAssignment}",
            "name": "[concat(variables('name_clusterVNetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name, 'aadObjectId'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('const_contribRole')]",
                "principalId": "[parameters('aadObjectId')]"
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
            "apiVersion": "${azure.apiVersion.vNetRoleAssignment}",
            "name": "[concat(variables('name_clusterVNetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, deployment().name, 'rpObjectId'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('const_contribRole')]",
                "principalId": "[parameters('rpObjectId')]"
            }
        },
        {
            "condition": "[parameters('createCluster')]",
            "type": "Microsoft.RedHatOpenShift/openShiftClusters",
            "apiVersion": "${azure.apiVersion.aroCluster}",
            "name": "[variables('name_clusterName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('name_clusterVNetName'))]"
            ],
            "properties": {
                "clusterProfile": {
                    "domain": "[variables('const_clusterDomainName')]",
                    "resourceGroupId": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', concat('MC_', resourceGroup().name, '_', variables('name_clusterName'), '_', parameters('location')))]",
                    "pullSecret": "[parameters('pullSecret')]"
                },
                "networkProfile": {
                    "podCidr": "10.128.0.0/14",
                    "serviceCidr": "172.30.0.0/16"
                },
                "servicePrincipalProfile": {
                    "clientId": "[parameters('aadClientId')]",
                    "clientSecret": "[parameters('aadClientSecret')]"
                },
                "masterProfile": {
                    "vmSize": "[parameters('masterVmSize')]",
                    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_clusterVNetName'), 'master')]"
                },
                "workerProfiles": [
                    {
                        "name": "worker",
                        "vmSize": "[parameters('workerVmSize')]",
                        "diskSizeGB": 128,
                        "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_clusterVNetName'), 'worker')]",
                        "count": 3
                    }
                ],
                "apiserverProfile": {
                    "visibility": "Public"
                },
                "ingressProfiles": [
                    {
                        "name": "default",
                        "visibility": "Public"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "${azure.apiVersion.deploymentScript}",
            "name": "[variables('name_deploymentScriptName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.RedHatOpenShift/openShiftClusters', variables('name_clusterName'))]"
            ],
            "kind": "AzureCLI",
            "identity": "[parameters('identity')]",
            "properties": {
                "AzCliVersion": "2.15.0",
                "arguments": "[concat(variables('const_arguments1'), variables('const_arguments2'))]",
                "primaryScriptUri": "[uri(variables('const_scriptLocation'), concat('install.sh', parameters('_artifactsLocationSasToken')))]",
                "supportingScriptUris":[
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-operator-subscription.yaml', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('htpasswd-cr.yaml', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('server.xml.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('Dockerfile.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('Dockerfile-wlp.template', parameters('_artifactsLocationSasToken')))]",
                    "[uri(variables('const_scriptLocation'), concat('open-liberty-application.yaml.template', parameters('_artifactsLocationSasToken')))]"
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${aro.aro.end}",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('name_deploymentScriptName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }
    ],
    "outputs": {
        "clusterName": {
            "value": "[variables('name_clusterName')]",
            "type": "string"
        },
        "clusterRGName": {
            "value": "[variables('const_clusterRGName')]",
            "type": "string"
        },
        "clusterConsoleUrl": {
            "value": "[reference(variables('name_deploymentScriptName')).outputs.consoleUrl]",
            "type": "string"
        },
        "containerRegistryUrl": {
            "value": "[reference(variables('name_deploymentScriptName')).outputs.containerRegistryUrl]",
            "type": "string"
        },
        "appName": {
            "value": "[variables('const_appName')]",
            "type": "string"
        },
        "appProjName": {
            "value": "[variables('const_appProjName')]",
            "type": "string"
        },
        "appImage": {
            "condition": "[parameters('uploadAppPackage')]",
            "value": "[variables('const_appImage')]",
            "type": "string"
        },
        "appServerXml": {
            "condition": "[parameters('uploadAppPackage')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appServerXml]",
            "type": "string"
        },
        "appDockerfile": {
            "condition": "[parameters('uploadAppPackage')]",
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDockerfile]",
            "type": "string"
        },
        "appDeploymentYaml": {
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appDeploymentYaml]",
            "type": "string"
        },
        "appEndpoint": {
            "value": "[reference(variables('name_deploymentScriptName')).outputs.appEndpoint]",
            "type": "string"
        }
    }
}